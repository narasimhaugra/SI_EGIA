<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.0" links="1">
 <!--${qpc}-->
 <framework name="qpc"/>
 <!--${AOs}-->
 <package name="AOs" stereotype="0x02">
  <!--${AOs::Logger}-->
  <class name="Logger" superclass="qpc::QActive">
   <!--${AOs::Logger::Timer}-->
   <attribute name="Timer" type="QTimeEvt" visibility="0x02" properties="0x00">
    <documentation>/// Timer object</documentation>
   </attribute>
   <!--${AOs::Logger::*pEventLogFile}-->
   <attribute name="*pEventLogFile" type="FS_FILE " visibility="0x00" properties="0x00"/>
   <!--${AOs::Logger::RotateLogTime}-->
   <attribute name="RotateLogTime" type="uint32_t" visibility="0x00" properties="0x00"/>
   <!--${AOs::Logger::EventLogIsDirty}-->
   <attribute name="EventLogIsDirty" type="bool    " visibility="0x00" properties="0x00"/>
   <!--${AOs::Logger::FsErr}-->
   <attribute name="FsErr" type="FS_ERR  " visibility="0x00" properties="0x00"/>
   <!--${AOs::Logger::ActiveDataDirPath[FS_CFG_MAX_PAT~}-->
   <attribute name="ActiveDataDirPath[FS_CFG_MAX_PATH_NAME_LEN]" type="uint8_t " visibility="0x00" properties="0x00"/>
   <!--${AOs::Logger::*pSecurityLogFile}-->
   <attribute name="*pSecurityLogFile" type="FS_FILE" visibility="0x00" properties="0x00"/>
   <!--${AOs::Logger::SecurityLogIsDirty}-->
   <attribute name="SecurityLogIsDirty" type="bool" visibility="0x00" properties="0x00"/>
   <!--${AOs::Logger::SDCardPresenceTimer}-->
   <attribute name="SDCardPresenceTimer" type="QTimeEvt" visibility="0x02" properties="0x00">
    <documentation>/// Timer object</documentation>
   </attribute>
   <!--${AOs::Logger::SM}-->
   <statechart properties="0x01">
    <!--${AOs::Logger::SM::initial}-->
    <initial target="../1">
     <action brief="Set up">/*
    Note: All code in the top level initial transition runs in the context of the task that calls
          the constructor function (LoggerCtor()), rather than the AO's context (TCB/stack frame).
          Further, this continues until the entry code of the state pointed to by the initial transition
          completes. (If that state contains an initial transition, execution continues in the caller's
          context until the bottom state's entry code is executed)

          This is of importance only if operations during this time might cause the invoking task's stack
          to overflow, or there is some TCB specific information required by an operation happening at this
          time.

          Further, since other active objects may not have been instantiated yet, do not post to other AOs
          during this time.

          After the initial state entry code has been executed, all other invocations of the AO will
          happen in the AO's context.

          One way to force a context change is to point the initial transition to a dummy state which
          arms a timer. When the timer times out &amp; sends an event to the state, it will be executing
          in the AO's context. That event can then transition to the next state, whose entry code will
          be run in the AO's context.
*/

/* ========================================================================== */
/**
 * \brief   Logger initial transition
 *
 * \details This function is the entry point to the state machine for the
 *          Logger active object. It initializes the RDF file and opens
 *          the event log. After initializing the event log file it transitions
 *          to the Startup state.
 *
 * \param   me - Pointer to local data store
 * \param   e  - Pointer to present event
 *
 * \return  State transition status. (Q_HANDLED(), Q_SUPER(), Q_UNHANDLED())
 *
 * ========================================================================== */

(void)par; /* unused parameter */

// Issue fake timeout event as 1st event in the queue to
// force a context switch in the Startup state to finish initialization in the Logger context.
AO_Post(AO_Logger, &amp;FakeTimeout, NULL);

L2_UartInit(DEBUG_UART, DEBUG_UART_BAUD);    // Set up debug uart

// Print the startup message. We aren't REALLY initialized yet, but we want this to
// appear before any log messages that FSInit/CreateSystemLogFile/LogFsInit may issue.
Log(REQ, &quot;Logger: Initialized&quot;);
/* Logger is initialized, log version */
Log(REQ, &quot;Signia Platform Version: %s\n&quot;, PLATFORM_VERSION);
Log(DBG, &quot;Log message example =         4,     1,    427,     3,        100: example&quot;);
Log(DBG, &quot;Log message format  = Log Level, Group, Line #, index, time(msec): message&quot;);

me-&gt;EventLogIsDirty = false;  // Nothing logged yet

// Subscribe to SD card in/out signals
AO_Subscribe(AO_Logger, P_SD_CARD_INSERTED_SIG);
AO_Subscribe(AO_Logger, P_SD_CARD_REMOVED_SIG);</action>
     <initial_glyph conn="4,4,5,0,12,4">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <!--${AOs::Logger::SM::Startup}-->
    <state name="Startup">
     <documentation>/* ========================================================================== */
/**
 * \brief   This is the startup state for the Logger Active Object
 *
 * \details This state processes a dummy timeout event posted to the Logger AO
 *          by its initial transition. The dummy timeout event is posted by the
 *          initial transition to insure that it is the 1st event in the queue.
 *          When this event is processed, it is running in the Logger AO context.
 *          This is the 1st time this occurrs, so initialization that must be run
 *          in the Logger context (instead of the system startup context) is
 *          performed here. (In this case, the setting of the working directory
 *          in the file system).
 *
 *          This construct is due to the nature of the Micrium port for QPC.
 *
 * \sa      FS_WorkingDirSet documentation in Micrium. (fs.c)
 *
 * \param   me - Pointer to local data store
 * \param   e  - Pointer to present event
 *
 * \return  State transition status: Q_HANDLED(), Q_UNHANDLED(), Q_TRAN(), Q_SUPER()
 *
 * ========================================================================== */</documentation>
     <!--${AOs::Logger::SM::Startup::TIMEOUT}-->
     <tran trig="TIMEOUT" target="../../2">
      <action>// This event does not come from a timer, but rather is
// posted by the initial transition. This is done to insure
// that this is the first event in the queue, before any
// log or RDF requests can be issued.

// When this event is executed, this is the 1st time the
// logger code is running in the logger context.

// The working directory is set here before any RDF events
// can be processed. The working directory must be set
// for the active task. 

FS_ERR FsErr;    // Error return

FS_WorkingDirSet((char *)&amp;me-&gt;ActiveDataDirPath, &amp;FsErr);    // Set working directory</action>
      <tran_glyph conn="4,14,3,0,26,6,-14,2">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,8,24,10"/>
    </state>
    <!--${AOs::Logger::SM::Operate}-->
    <state name="Operate">
     <documentation>/* ========================================================================== */
/**
 * \brief   This is the running state for the Logger Active Object
 *
 * \details The Logger object handles both Event &amp; RDF (streaming) data logging.
 *          It responds to the following signals:
 *             - TIMEOUT_SIG
 *             - P_SD_CARD_INSERTED_SIG
 *             - P_SD_CARD_REMOVED_SIG
 *             - RDF_OPEN_SIG
 *             - RDF_DATA_SIG
 *             - RDF_CLOSE_SIG
 *             - PRINTF_SIG
 *
 * \param   me - Pointer to local data store
 * \param   e  - Pointer to present event
 *
 * \return  State transition status: Q_HANDLED(), Q_UNHANDLED(), Q_TRAN(), Q_SUPER()
 *
 * ========================================================================== */
</documentation>
     <entry>FsInit();
LogFsInit(me);                // Create log file directory structure as required &amp; create event log file
LogWriteSynopsis(me);         // Update synopsis file w/ datestamp of newly created folder

AO_TimerArm(&amp;me-&gt;SDCardPresenceTimer, ROTATE_LOG_TIMEOUT, ROTATE_LOG_TIMEOUT); // Start rotate timer
AO_TimerArm(&amp;me-&gt;Timer, FLUSH_EVENT_LOG_TIMER_INTERVAL_LONG, 0);  //KA: cs 1587 uses the line above

LoggerInitialized = true;
</entry>
     <exit brief=" ">AO_TimerDisarm(&amp;me-&gt;Timer);     // Not really required - just to be sure &amp; illustrate usage
AO_TimerDisarm(&amp;me-&gt;SDCardPresenceTimer); // Not really required - just to be sure &amp; illustrate usage</exit>
     <!--${AOs::Logger::SM::Operate::P_SD_CARD_INSERTED}-->
     <tran trig="P_SD_CARD_INSERTED">
      <action>if (!LoggerDisabled)
{
    FSDev_Open(&quot;sdcard:0:&quot;, (void *)0, &amp;me-&gt;FsErr);
    FSVol_Open(&quot;sdcard:0:&quot;, &quot;sdcard:0:&quot;, 0, &amp;me-&gt;FsErr);
}</action>
      <tran_glyph conn="4,30,3,-1,22">
       <action box="0,-2,20,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Logger::SM::Operate::P_SD_CARD_REMOVED}-->
     <tran trig="P_SD_CARD_REMOVED">
      <action>FSVol_Close(&quot;sdcard:0:&quot;, &amp;me-&gt;FsErr);
FSDev_Close(&quot;sdcard:0:&quot;, &amp;me-&gt;FsErr);</action>
      <tran_glyph conn="4,32,3,-1,22">
       <action box="0,-2,20,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Logger::SM::Operate::RDF_OPEN}-->
     <tran trig="RDF_OPEN">
      <action>if (!LoggerDisabled)
{
    RdfProcessOpenSignal(e);
    SdhcLEDCnt++;
    L3_GpioCtrlSetSignal(GPIO_SDHC0_LED);
}</action>
      <tran_glyph conn="4,36,3,-1,22">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Logger::SM::Operate::RDF_DATA}-->
     <tran trig="RDF_DATA">
      <action>#if REPORT_TIME_GREATER_THAN
static uint32_t MaxTime = 0;
#endif

if (!LoggerDisabled)
{
    #if REPORT_TIME_GREATER_THAN            // Keep track of maximum time spent logging an RDF record
    uint32_t ElapsedTime;
    uint32_t StartTime = OSTimeGet();
    #endif

    RdfProcessDataSignal(e);

    #if REPORT_TIME_GREATER_THAN
    ElapsedTime = OSTimeGet() - StartTime;
    if (ElapsedTime &gt; REPORT_TIME_GREATER_THAN)
    {
         Log(DBG, &quot;SD Card elapsedTime = %d&quot;, ElapsedTime);

        if (ElapsedTime &gt; MaxTime)
        {
            MaxTime = ElapsedTime;
            Log(DBG, &quot;SD Card maxTime   = %d&quot;, MaxTime);
        }
    }
    #endif
}</action>
      <tran_glyph conn="4,38,3,-1,22">
       <action box="0,-2,12,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Logger::SM::Operate::RDF_CLOSE}-->
     <tran trig="RDF_CLOSE">
      <action>RdfProcessCloseSignal(e);
if (--SdhcLEDCnt == 0)
{
    L3_GpioCtrlClearSignal(GPIO_SDHC0_LED);
}</action>
      <tran_glyph conn="4,40,3,-1,22">
       <action box="0,-2,12,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Logger::SM::Operate::PRINTF}-->
     <tran trig="PRINTF">
      <action brief=" ">QEVENT_LOG_MSG *pLog;

pLog = (QEVENT_LOG_MSG *)e;

AO_TimerRearm(&amp;me-&gt;Timer, FLUSH_EVENT_LOG_TIMER_INTERVAL_LONG);    // Restart timer. Do not timeout till period of no message activity

SendMessageToLog(me, EVENT_LOG_FILE, pLog-&gt;Msg, strlen((char *)pLog-&gt;Msg));

if (!me-&gt;EventLogIsDirty)        // File not dirty yet. Turn on SDHC LED
{
    SdhcLEDCnt++;
    L3_GpioCtrlSetSignal(GPIO_SDHC0_LED);
    me-&gt;EventLogIsDirty = true;  // File is now dirty (pending flush)
}</action>
      <tran_glyph conn="4,44,3,-1,22">
       <action box="0,-2,11,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Logger::SM::Operate::TIMEOUT}-->
     <tran trig="TIMEOUT">
      <action>if (me-&gt;EventLogIsDirty)
{
    // timeout occured, close file to save, then reopen
    FSFile_Close(me-&gt;pEventLogFile, &amp;me-&gt;FsErr);  // Close event log to flush it &amp; reopen if logging enabled.
    if (!LoggerDisabled)
    {
        me-&gt;pEventLogFile = FSFile_Open(EVENT_LOG_NAME, FS_FILE_ACCESS_MODE_WR | FS_FILE_ACCESS_MODE_APPEND | FS_FILE_ACCESS_MODE_CREATE, &amp;me-&gt;FsErr);
        me-&gt;EventLogIsDirty = false;
    }
    else
    {
        me-&gt;pEventLogFile = NULL;
        if (--SdhcLEDCnt == 0)
        {
            L3_GpioCtrlClearSignal(GPIO_SDHC0_LED);
        }
        me-&gt;EventLogIsDirty = false;
    }

    // reset timer
    AO_TimerArm(&amp;me-&gt;Timer, FLUSH_EVENT_LOG_TIMER_INTERVAL_LONG, 0);
}

if (me-&gt;SecurityLogIsDirty)
{
    // timeout occurred, close file to save, then reopen
    FSFile_Close(me-&gt;pSecurityLogFile, &amp;me-&gt;FsErr);  // Close event log to flush it &amp; reopen if logging enabled.

    if (!LoggerDisabled)
    {
        me-&gt;pSecurityLogFile = FSFile_Open(SECURITY_LOG_NAME, FS_FILE_ACCESS_MODE_WR | FS_FILE_ACCESS_MODE_APPEND | FS_FILE_ACCESS_MODE_CREATE, &amp;me-&gt;FsErr);
        me-&gt;SecurityLogIsDirty = false;
    }
    else
    {
        me-&gt;pSecurityLogFile = NULL;
        me-&gt;SecurityLogIsDirty = false;
    }
}
// Old timeout processing RotateEventLog(); // Don't know what this is?</action>
      <tran_glyph conn="4,46,3,-1,22">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Logger::SM::Operate::SECURITY_LOG}-->
     <tran trig="SECURITY_LOG">
      <action>QEVENT_LOG_MSG *pLog;

pLog = (QEVENT_LOG_MSG *)e;

AO_TimerRearm(&amp;me-&gt;Timer, FLUSH_EVENT_LOG_TIMER_INTERVAL_LONG);    // Restart timer. Do not timeout till period of no message activity

SendMessageToLog(me, SECURITY_LOG_FILE, pLog-&gt;Msg, strlen((char *)pLog-&gt;Msg));

if (!me-&gt;SecurityLogIsDirty)
{
    me-&gt;SecurityLogIsDirty = true;  // File is now dirty (pending flush)
}</action>
      <tran_glyph conn="4,48,3,-1,22">
       <action box="0,-2,18,2"/>
      </tran_glyph>
     </tran>
     <!--${AOs::Logger::SM::Operate::SD_CARD_PRESENCE_TIMEOUT}-->
     <tran trig="SD_CARD_PRESENCE_TIMEOUT">
      <action>/*  The HANDLE software shall enter SD_CARD_EM if the micro SD_CARD is not present during HANDLE_STARTUP
    and checked every 60 +/- 5 seconds thereafter */
if (FS_ERR_NONE != FsIsSDCardPresent())
{
    Log(REQ, &quot;FileSys: SD Card Not Present&quot;);
    FaultHandlerSetFault(SDCARD_NOTPRESENT, SET_ERROR);
}
else
{
   Log(REQ, &quot;FileSys: SD Card Present&quot;);
}</action>
      <tran_glyph conn="4,52,3,-1,22">
       <action box="0,-2,17,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,22,24,41">
      <entry box="1,2,14,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="161,122"/>
   </statechart>
  </class>
  <!--${AOs::LoggerCtor}-->
  <operation name="LoggerCtor" type="void" visibility="0x00" properties="0x01">
   <documentation>/* ========================================================================== */
/**
 * \brief   Constructor for the Logger Active Object
 *
 * \details Establishes the Active Object (AO) and executes the initial transition
 *          and state entry code. Other AO specific objects, such as timers, may
 *          be instantiated here.
 * \n \n
 *          The Logger &quot;constructor&quot; is provided outside of the Logger class,
 *          so that it can be used independently from the class. This is part
 *          of the &quot;opaque pointer&quot; design idiom.
 * \n \n
 *          Establishing the AO encompasses the following activities:
 *              - Initialize and register the task control block with Micrium.
 *                  - Set the stack
 *                  - Set the priority
 *                  - Set the name
 *              - Initialize and register the active object control block with QP/C.
 *                  - Set the event queue
 *                  - Pass user defined initialization parameters
 *
 * \note    The initial transition and state entry code (the 1st time) are executed
 *          in the calling task's context so care must be taken to consider the calling
 *          task's stack constraints and task dependent defaults, if any, when writing
 *          that code. This is usually not a problem, but when using certain features of
 *          Micrium (such as the file system), Micrium keeps certain configuration information
 *          in the task control block.
 *
 * \param   &lt; None &gt;
 *
 * \return  None
 *
 * ========================================================================== */
</documentation>
   <code>Logger *me = (Logger *)AO_Logger;

AO_TimerCtor(&amp;me-&gt;Timer, &amp;me-&gt;super, TIMEOUT_SIG);  // Build timer
AO_TimerCtor(&amp;me-&gt;SDCardPresenceTimer, &amp;me-&gt;super, SD_CARD_PRESENCE_TIMEOUT_SIG);  // Build timer

AO_Start(AO_Logger,                             // Pointer to QActive object (AO)
         Q_STATE_CAST(&amp;Logger_initial),         // Pointer to initial transition
         TASK_PRIORITY_LOG,                  // Task priority
         LoggerEventQueue,                      // Pointer to event queue
         LOGGER_EVQ_SIZE,                       // Size of event queue (in entries) This could be Q_DIM(MotorDevStubs_queueSto
         LoggerStack,                           // Pointer to stack (bottom)
         LOGGER_STACK_SIZE,                     // Stack size This could be Q_TIM(MotorDevStubs
         NULL,                                  // Pointer to object specific initialization parameters
         AOname);                               // Pointer to name of active object</code>
  </operation>
 </package>
 <!--${.}-->
 <directory name=".">
  <!--${.::Logger.c}-->
  <file name="Logger.c" properties="external"/>
  <!--${.::Logger.h}-->
  <file name="Logger.h" properties="external"/>
 </directory>
</model>
