/*.$file${.::Logger.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: Logger.qm
* File:  ${.::Logger.h}
*
* This code has been generated by QM 5.1.0 <www.state-machine.com/qm/>.
* DO NOT EDIT SECTIONS BETWEEN THE COMMENTS "$...vvv".."$end...^^^".
* All your changes in these sections will be lost.
*
* This code is covered by the following QP license:
* License #   : QPC-SP-170817A
* Issued to   : Covidien LP
* Framework(s): qpc
* Support ends: 2022-08-17
* Product(s)  :
* Signia Powered Stapler
*/
/*.$endhead${.::Logger.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifndef LOGGER_H
#define LOGGER_H

#ifdef __cplusplus  /* header compatible with C++ project */
extern "C"
{
#endif

/* ========================================================================== */
/**
 * \brief   Header file for Logger Active Object
 *
 * \details Global defines and prototypes defined here.
 *
 * \copyright 2021 Covidien - Surgical Innovations. All Rights Reserved.
 *
 * \file    Logger.h
 *
 * ========================================================================== */
/******************************************************************************/
/*                             Include                                        */
/******************************************************************************/
#include "Common.h"

/******************************************************************************/
/*                             Global Define(s) (Macros)                      */
/******************************************************************************/
/*  \note: Whoever using this macro, shall make sure LOG_GROUP_IDENTIFIER macro is
    defined to a corresponding LOG_GROUP enum in that file */

/*Log messages are sent to eventLog.txt */
#define Log(eLogLevel, pcFormatString, var_args... )         (LogMsg(EVENT_LOG_FILE,    eLogLevel, LOG_GROUP_IDENTIFIER, __LINE__, pcFormatString, ##var_args))

/*SecurityLog messages are sent to securityLog.txt with Log level fixed to REQ*/
/* The HANDLE software shall log all messages to the SECURITY_LOG with a log level of “REQ”.- Log level hardcoded to REQ */
#define SecurityLog(pcFormatString, var_args... )            (LogMsg(SECURITY_LOG_FILE, REQ, LOG_GROUP_IDENTIFIER, __LINE__, pcFormatString, ##var_args))

#define MAX_LOG_STRING_LEN      (150u)               ///< Max Length possible for a single Log Msg
/*  \note: Call the below if we want to print from ISR */
#define LogFromIsr(pcFormatString, var_args... )     (LogMsgFromIsr(pcFormatString, ##var_args))

/******************************************************************************/
/*                             Global Type(s)                                 */
/******************************************************************************/
/* Different Log Levels

    Developer - Low-level print statements can be used by developers, to see the
            behavior of a function or a module. E.g.: Log inside a retry loop.
    Trace - Used to mark the entry and exit of functions, for purposes of
            performance profiling.
    Debug [Default] - Debug logs that are logs the operation of the system.
    Requirement  - Required logs are part of normal logs but referred in the
            Log requirement document. E.g.: Handle SN.
    Warning - A warning has occurred which was corrected or ignored by the system.
            E.g.: Low Battery.
    Error - An Error has occurred, but the system can continue operation to avoid
            patient harm. E.g.: One wire short.
    Fault - A Fatal condition has occurred, and all further operation is denied.
            E.g.: Memory Fence

            Log level REQ and above shall have log drop protection and shall be
            be part of log validation
*/
typedef enum        ///  Log Levels
{
    DEV = 1,        ///< Developer
    TRC,            ///< Trace
    DBG,            ///< Debug
    REQ,            ///< Requirement
    WNG,            ///< Warning
    ERR,            ///< Error
    FLT,            ///< Fault
    TST,            ///< Test
    LOG_LEVEL_LAST  ///< Last Level
} LOG_LEVEL;

 /* Log Group Identifier - Every file/group of files can have a common group
    identifier. E.g.: all GPIO modules [L2 & L3] will have a group identifier as
    LOG_GROUP_GPIO. Add a new entry to the enum for every new file/group of
    files added to the project and define them to LOG_GROUP_IDENTIFIER in those
    file(s).
*/
typedef enum                    ///  Log Group
{
    LOG_GROUP_GENERAL   =  0,   ///< General - Default Group
    LOG_GROUP_TESTS     =  1,   ///< Test Stubs
    LOG_GROUP_GPIO      =  2,   ///< GPIO related files
    LOG_GROUP_I2C       =  3,   ///< I2C related files
    LOG_GROUP_SPI       =  4,   ///< SPI related files
    LOG_GROUP_UART      =  5,   ///< UART related files
    LOG_GROUP_1W        =  6,   ///< One Wire related files
    LOG_GROUP_DMA       =  7,   ///< DMA related Files
    LOG_GROUP_TIMER     =  8,   ///< Timer related Files
    LOG_GROUP_LOGGER    =  9,   ///< Logger related Files
    LOG_GROUP_MAIN      = 10,   ///< Main.c related Files
    LOG_GROUP_INIT      = 11,   ///< Init related Files
    LOG_GROUP_MCUX      = 12,   ///< MCU Exception related Files
    LOG_GROUP_FPGA      = 13,   ///< FPGA related Files
    LOG_GROUP_ACCEL     = 14,   ///< Accelerometer related Files
    LOG_GROUP_FLASH     = 15,   ///< Flash related Files
    LOG_GROUP_FILE_SYS  = 16,   ///< File System related Files
    LOG_GROUP_DISPLAY   = 17,   ///< Display related files.
    LOG_GROUP_TONE      = 18,   ///< Tone related files.
    LOG_GROUP_USB       = 19,   ///< USB related files.
    LOG_GROUP_BATTERY   = 20,   ///< SMBUS Battery related files
    LOG_GROUP_WIFI      = 21,   ///< WiFi related files.
    LOG_GROUP_IR        = 22,   ///< IR related files
    LOG_GROUP_MOTOR     = 23,   ///< Motor related Files
    LOG_GROUP_COMM      = 24,   ///< Communication Manager related files
    LOG_GROUP_BLOB      = 25,   ///< Communication Manager related files
    LOG_GROUP_ADAPTER   = 26,   ///< Adapter Manager related files
    LOG_GROUP_SENSOR    = 27,   ///< Sensor related files
    LOG_GROUP_KEYPAD    = 28,   ///< Keypad related files
    LOG_GROUP_CONSOLE   = 29,   ///< Console Manager related files
    LOG_GROUP_CHARGER   = 30,   ///< Charger related files
    LOG_GROUP_AO        = 31,   ///< Active object files
    LOG_GROUP_POWER     = 32,   ///< Active object files
    LOG_GROUP_FH        = 33,   ///< Fault Handler related files

    // EGIA Application IDs start here. Additional IDs can added on request/
    LOG_GROUP_EGIA      = 34,   ///< EGIA Application. Add more place holders?

    // EEA Application IDs start here. Additional IDs can added on request/
    LOG_GROUP_EEA       = 35,   ///< EEA Application. Add more place holders?

    // NGSL Application IDs start here. Additional IDs can added on request/
    LOG_GROUP_NGSL      = 36,   ///< NGSL Application. Add more place holders?

    // No IDs below this line
    LOG_GROUP_LAST      = 37   ///< Last Group.

} LOG_GROUP;

/// Log file type enum
typedef enum             ///  Log file to be updated
{
    EVENT_LOG_FILE,      ///< Event Log
    SECURITY_LOG_FILE,   ///< Security Log
    LOG_FILE_LAST
} LOG_FILE;

/// \todo 11/15/2021 DAZ - This may belong somewhere else. (Common.h?)
/// Variable types for streaming (RDF/KVF/MCP)

/// Log message event
typedef struct
{
    QEvt    Event;                      ///< QPC event header
    uint8_t Msg[MAX_LOG_STRING_LEN];    ///< Log message
} QEVENT_LOG_MSG;

/******************************************************************************/
/*                             Global Constant Declaration(s)                 */
/******************************************************************************/

/******************************************************************************/
/*                             Global Variable Declaration(s)                 */
/******************************************************************************/

/******************************************************************************/
/*                             Global Function Prototype(s)                   */
/******************************************************************************/

/*.$declare${AOs::LoggerCtor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/

/* ========================================================================== */
/*.${AOs::LoggerCtor} ......................................................*/
void LoggerCtor(void);
/*.$enddecl${AOs::LoggerCtor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/

extern QActive *const  AO_Logger;      /* Opaque pointer to Logger Active Object */
extern bool CreateSystemLogFile(void);
bool CreateSDCardRootDirectories(void);
void LogMsg(LOG_FILE eLogFile, LOG_LEVEL eLogLevel, LOG_GROUP eLogGroup, uint16_t u16LineNumber, const char *pcFormatString, ... );
void LogMsgFromIsr(const char *pcFormatString, ... );
void CleanupOldRdfFiles(void *RdfCleanupSize);

#ifdef __cplusplus  /* header compatible with C++ project */
}
#endif

#endif  /* LOGGER_H */

