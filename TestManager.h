/*.$file${.::TestManager.h} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*
* Model: TestManager.qm
* File:  ${.::TestManager.h}
*
* This code has been generated by QM 5.1.0 <www.state-machine.com/qm/>.
* DO NOT EDIT SECTIONS BETWEEN THE COMMENTS "$...vvv".."$end...^^^".
* All your changes in these sections will be lost.
*
* This code is covered by the following QP license:
* License #   : QPC-SP-170817A
* Issued to   : Covidien LP
* Framework(s): qpc
* Support ends: 2022-08-17
* Product(s)  :
* Signia Powered Stapler
*/
/*.$endhead${.::TestManager.h} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/
#ifndef TESTMANAGER_H
#define TESTMANAGER_H

#ifdef __cplusplus  /* header compatible with C++ project */
extern "C"
{
#endif

/* ========================================================================== */
/**
 * \brief   Header file for TestManager Active Object
 *
 * \details Global defines and prototypes defined here.
 *
 * \copyright 2021 Covidien - Surgical Innovations. All Rights Reserved.
 *
 * \file    TestManager.h
 *
 * ========================================================================== */
/******************************************************************************/
/*                             Include                                        */
/******************************************************************************/
#include "Common.h"

/******************************************************************************/
/*                             Global Define(s) (Macros)                      */
/******************************************************************************/

#define MAX_TESTDATA_LEN    (100u)       ///Maximum length of the Test Message in bytes

/******************************************************************************/
/*                             Global Type(s)                                 */
/******************************************************************************/
 typedef enum{
     TM_STATUSOK,
     TM_STATUSFAIL
 }TM_STATUS;

typedef enum {
    HOOK_BATTERYPARAMETER,
    HOOK_ONEWIRE_AUTHENTICATION,
    HOOK_ADAPTERUART,
    HOOK_USBTXSTART,
    HOOK_USBTXEND,
    HOOK_USBRXSTART,
    HOOK_USBRXEND,
    HOOK_SDWRSTART,
    HOOK_SDWREND,
    HOOK_SDRDSTART,
    HOOK_SDRDEND,
    HOOK_MTRTESTSTART,
    HOOK_MTRSPEED,
    HOOK_ONEWIREAUTH,
    HOOK_ONEWIRENVMTEST,
    HOOK_MTRSERVOSTART,
    HOOK_MTRSERVOEND,
    HOOK_MTRPOSITION,
    HOOK_RAMPATTERNFAIL,
    HOOK_RAMANTIPATTERNFAIL,
    HOOK_LESSTHANFIVEPERC_SPACE,
    HOOK_FILESYSTEMERROR,
    HOOK_OSMUTEXFAIL,
    HOOK_OSTASKFAIL,
    HOOK_OSQUEFAIL,
    HOOK_ONEWIRECRCTEST,
    HOOK_GPIOSIGNAL,
    HOOK_LOGCNTROLLOVER,
    HOOK_SPICRCFAIL,
    HOOK_ADAPTERCRCFAIL,
    HOOK_ONEWIREMASTERFAIL,
    HOOK_ONEWIRE_READFAIL,
    HOOK_ONEWIRE_WRITEFAIL,
    HOOK_BATTERYDFFAIL,
    HOOK_BATTCOMMSIMULATE,
    HOOK_ADAPTERMANAGER,
    HOOK_STRAINGUAGE1VAL, 
    HOOK_WATCHDOGINIT,
    HOOK_SIMULATEXPMODEERROR,
    HOOK_SIMULATEMOTOREVERSAL,
    HOOK_SG_CALIB_SUCCES_SIMULATE,
    HOOK_SG_CLAMP_FULLCLOSE_SIMULATE,
    HOOK_SG_CLAMP_FULLOPEN_SIMULATE,
    HOOK_SG_PREFIRE_SIMULATE,
    HOOK_SG_FIREIDLE_SIMULATE,
    HOOK_SG_FIRING_SIMULATE,
    HOOK_SG_FIRING_RETRACTRACTION_SIMULATE,
    HOOK_SG_POST_FIRE_SIMULATE,
    HOOK_MTR_CRNTRIP_SIMULATE,
    HOOK_LUP_RDN_ROTATION_MTR_CRNT_SIMULATE,
    HOOK_LDN_RUP_ROTATION_MTR_CRNT_SIMULATE,
    HOOK_ARTIC_LEFT_MTR_CRNT_SIMULATE,
    HOOK_ARTIC_RIGHT_MTR_CRNT_SIMULATE,
    HOOK_RETRACT_MTR_CRNT_SIMULATE,
    HOOK_PROCEDURE_FIRE_CNT_SIMULATE,
    HOOK_FLASH_INTEGRITY_SIMULATE,
    HOOK_TM,
    HOOK_COUNT
} HOOKID;

typedef enum{
    TC_DUMMY,                           ///< TestID = 0 -> not valid
    TC_TASKMONITOR_STACKFAULT,          ///< TestID = 1 -> Simulate Statck Fault
    TC_TASKMONITOR_CPUUTILIFAULT,       ///< TestID = 2 -> Simulate CPU Utilization Fault
    TC_TASKMONITOR_TASKCHKFAIL,         ///< TestID = 3 -> Simulate Task checkin Fault
    TC_TESTWATCHDOG,                    ///< TestID = 4 -> Simulate Watchdog Failure
    TC_SIM_BATTPARAM,                   ///< TestID = 5 -> Battery Parameter simulation
    TC_SDCARD_RDWRPERFORMANCE,          ///< TestID = 6 -> SD Card read write performance
    TC_USB_PERFORMANCE,                 ///< TestID = 7 -> USB performance
    TC_MTR_PERFORMANCE,                 ///< TestID = 8 -> Motor performance
    TC_ONEWIREAUTHENTICATIONFAIL,       ///< TestID = 9 -> OneWireAuthentication Fail
    TC_ONEWIRENVMTESTFAIL,              ///< TestID = 10 -> OneWire NVM test Fail
    TC_ONEWIRECRCTESTFAIL,              ///< TestID = 11 -> OneWire CRC test Fail
    TC_MTR_POSITION_CHECK,              ///< TestID = 12 -> Motor Position Check
    TC_MEM_FAULT_RAMINTEXTINTGRTY,      ///< TestID = 13 -> Memory Fault RAM (Internal & External )Integrity Check
    TC_OS_FAILURES,                     ///< TestID = 14 -> OS Failures
    TC_SD_CARD_ERRORS,                  ///< TestID = 15 -> SD Card Errors
    TC_KEYSIMULATION,                   ///< TestID = 16 -> Simulate the Key signals
    TC_ONEWIREMASTERFAIL,               ///< TestID = 17 -> OneWire master failure
    TC_EVE_LOGGING,                     ///< TestID = 18 -> Event Logging
    TC_CRCFAILURES,                     ///< TestID = 19 -> CRC Failures of SPI BUS, UART SERIAL PORT
    TC_ONEWIRE_READFAIL,                ///< TestID = 20 -> OneWire Read fail
    TC_ONEWIRE_WRITEFAIL,               ///< TestID = 21 -> OneWire Write fail
    TC_BATTFLASHPARAMFAIL,              ///< Test ID = 22 -> Battey Falsh Parameter Failure
    TC_ADAPTERERRORS,                   ///< TestID = 23 -> Adapter Errors simulation
    TC_TONEANDSCREENSIMULATION,         ///< TestID = 24 -> Signia Tones & Screens Simulation 
    TC_ERRORTYPESIMULATION,             ///< TestID = 25 -> Signia Error Types Simulation
    TC_MOTOR_REVERSAL,                  ///< TestID = 26 -> Signia Motor Reversal Simualtion
    TC_MOTOR_CRNTRIP_SIMULATION,      	///< TestID = 27 -> Motor Current Limit Simulation During EGIA Operation 
    TC_PROCEDURE_FIRE_CNT_SIMULATION, 	///< TestID = 28 -> Handle Procedure And Fire Count Simulation 
    TC_MEOMRY_FENCE_ERROR_SIMULATION, 	///< TestID = 29 -> Handle Memory Errors (Fence) Simulation
    TC_MEMORY_FALUT_FLASH_INEGRITY,     ///< TestID = 30 -> Memory Fault Internal Flash Integrity Check
    TC_COUNT
} TESTCASE;


/// Test manager test event
typedef struct
{
    QEvt    Event;                      ///< QPC event header
    uint16_t size;                      ///< Size of Data
    uint16_t RxKey;                     ///< Received Key
    uint16_t TestID;                    ///< Test ID
    uint8_t Data[MAX_TESTDATA_LEN];     ///< Data feild in message
} QEVENT_TEST_MSG;



/******************************************************************************/
/*                             Global Constant Declaration(s)                 */
/******************************************************************************/

/******************************************************************************/
/*                             Global Variable Declaration(s)                 */
/******************************************************************************/

/******************************************************************************/
/*                             Global Function Prototype(s)                   */
/******************************************************************************/

/*.$declare${AOs::TestManagerCtor} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv*/
/*.${AOs::TestManagerCtor} .................................................*/
void TestManagerCtor(void);
/*.$enddecl${AOs::TestManagerCtor} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/

void TM_Hook(HOOKID id, void *pData);

extern QActive *const  AO_TestManager;      /* Opaque pointer to Logger Active Object */

#ifdef __cplusplus  /* header compatible with C++ project */
}
#endif

#endif  /* TESTMANAGER_H */